apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

group = mavenGroup
version = mavenVersion

def moduleArtifactId = "${mavenArtifactId}${moduleSuffix}"

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    failOnError = false
}
javadoc.options.addStringOption('Xdoclint:none', '-quiet')


task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        library(MavenPublication) {

            groupId mavenGroup
            artifactId moduleArtifactId
            version mavenVersion

            def releaseAar = "$buildDir/outputs/aar/${project.name}-release.aar"

            artifact releaseAar
            artifact javadocJar
            artifact sourcesJar

            pom.withXml {
                // Name
                asNode().appendNode('name', projectName)

                // Description
                asNode().appendNode('description', projectDesc)

                // URL
                asNode().appendNode('url', githubUrl)

                // Inception Year
                asNode().appendNode('inceptionYear', '2019')

                // Licenses
                def license = asNode().appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')

                // Developers
                def developer = asNode().appendNode('developers').appendNode('developer')
                developer.appendNode('name', 'Google')

                // SCM
                def scm = asNode().appendNode('scm')
                scm.appendNode('connection', "${githubUrl}.git")
                scm.appendNode('url', githubUrl)

                // Dependencies
                def dependenciesNode = asNode().getAt('dependencies')[0]
                if (dependenciesNode == null) {
                    dependenciesNode = asNode().appendNode('dependencies')
                }

                // Add all that are 'compile'
                configurations.api.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    def isInternal = it.group == 'com.firebase';

                    def depGroupId = isInternal ? group : it.group
                    // TODO: It would be better if this line used moduleSuffix
                    def depArtifactId = isInternal 
                        ? it.name == "library" 
                            ? "geofire-android" 
                            : "geofire-android-$it.name" 
                        : it.name
                    def depVersion = isInternal ? version : it.version

                    println("dependency: $name --> $depGroupId:$depArtifactId:$depVersion")

                    dependencyNode.appendNode('groupId', depGroupId)
                    dependencyNode.appendNode('artifactId', depArtifactId)
                    dependencyNode.appendNode('version', depVersion)
                }
            }
        }
    }
}

bintray {
    user = hasProperty('BINTRAY_USER') ? getProperty('BINTRAY_USER') : System.getenv('BINTRAY_USER')
    key = hasProperty('BINTRAY_KEY') ? getProperty('BINTRAY_KEY') : System.getenv('BINTRAY_KEY')

    publications = [ 'library' ]

    def pomSrc = "$buildDir/publications/library/pom-default.xml"
    def pomDst = "com/firebase/$moduleArtifactId/$mavenVersion/"
    def pomName = "${moduleArtifactId}-${mavenVersion}.pom"

    print("""
    POM copy spec:
        | src=${pomSrc}
        | dst=${pomDst}
        | name=${pomName}
    """)

    filesSpec {
        from pomSrc
        into pomDst
        rename { String fileName ->
            pomName
        }
    }

    print("""
    Bintray package spec:
        | userOrg=${bintrayOrg} 
        | repo=${projectName}
        | name=${moduleArtifactId}
        | version=${mavenVersion}
    """)

    pkg {
        repo = projectName
        name = moduleArtifactId
        userOrg = bintrayOrg
        licenses = [ 'Apache-2.0' ]
        vcsUrl = "${githubUrl}.git"

        version {
            name = mavenVersion
            released = new Date()
        }
    }
}

afterEvaluate { project ->
    def pomTask = "generatePomFileForLibraryPublication"

    // Convenience task to prepare everything we need for releases
    task prepareArtifacts(dependsOn: [javadocJar, sourcesJar, assembleRelease, pomTask]) {}
}
